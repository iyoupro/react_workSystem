import React, { Component } from 'react';
import { Icon } from 'antd';
import styles from './item.less';

class Item extends Component {
  constructor(props) {
    super(props);
    this.state = { showChildren: false };
  }

  getItemBound = () => {
    return this.item.getBoundingClientRect();
  }

  onClick = () => {
    this.setState(preState => ({ showChildren: !preState.showChildren }));
    this.childrenItem[0].item.addEventListener('transitionend', this.handleTransitionend);
    this.clearCanvas();
  }

  handleTransitionend = () => {
    this.childrenItem[0].item.removeEventListener('transitionend', this.handleTransitionend);
    this.item.scrollIntoView({ behavior: 'smooth' });
    this.renderLines();
  }

  clearCanvas = () => {
    this.canvas.setAttribute("width", 0);
    this.props.parentItem && this.props.parentItem.clearCanvas();
  }

  renderLines = () => {
    const itemBound = this.getItemBound();
    const wrapperBound = this.wrapper.getBoundingClientRect();
    this.canvas.setAttribute("width", wrapperBound.width);
    this.canvas.setAttribute("height", wrapperBound.height);
    const ctx = this.canvas.getContext("2d");
    ctx.beginPath(); 
    ctx.lineWidth = 1; 
    ctx.strokeStyle='#000000';
    const firstChildBound = this.childrenItem[0].getItemBound();
    const lastChildBound = this.childrenItem[this.childrenItem.length - 1].getItemBound()
    ctx.moveTo(itemBound.left - wrapperBound.left + itemBound.width / 2, itemBound.bottom - wrapperBound.top);
    ctx.lineTo(itemBound.left - wrapperBound.left + itemBound.width / 2, (itemBound.bottom + firstChildBound.top - wrapperBound.top - itemBound.top) / 2);
    ctx.moveTo(firstChildBound.left - wrapperBound.left + firstChildBound.width / 2, (itemBound.bottom + firstChildBound.top - wrapperBound.top - itemBound.top) / 2);
    ctx.lineTo(lastChildBound.left - wrapperBound.left + lastChildBound.width / 2, (itemBound.bottom + firstChildBound.top - wrapperBound.top - itemBound.top) / 2);
    this.childrenItem.map(child => {   
      const childItemBound = child.getItemBound(); 
      ctx.moveTo(childItemBound.left - wrapperBound.left + childItemBound.width / 2, (itemBound.bottom + childItemBound.top - wrapperBound.top - itemBound.top) / 2);
      ctx.lineTo(childItemBound.left - wrapperBound.left + childItemBound.width / 2, childItemBound.top - itemBound.top);
    });
    ctx.stroke();
    this.props.parentItem && this.props.parentItem.renderLines();
  }

  render() {
    const { data, show, head, mode } = this.props;
    const { showChildren } = this.state;
    this.childrenItem = [];
    return (
      <div className={`${styles.wrapper} ${show || head? styles.show : ''} ${head ? styles.head : ''}`} ref={ref => this.wrapper = ref}>
        <canvas ref={ref => this.canvas = ref} style={{ width: '100%', height: '100%', position: 'absolute', background: 'pink'}}></canvas>
        <div className={`${styles.item} ${show ? styles.show : ''}`} ref={ref => this.item = ref} >
          {show && data.label}
          {data.children && show &&
            <Icon className={styles.icon} type={!showChildren ? "down-circle" : "up-circle"} theme="outlined" onClick={this.onClick} />
          }
        </div>
        <div className={`${styles.childWrapper}`}>
          {data.children &&
            data.children.map(item => <Item key={item.key} ref={ref=> ref && this.childrenItem.push(ref)} data={item} show={showChildren && show} parentItem={this} />)
          }
        </div>
      </div>
    );
  }
};

export default Item;
