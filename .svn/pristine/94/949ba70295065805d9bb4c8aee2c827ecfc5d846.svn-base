import React, { useState, useRef, useEffect } from 'react';
import { Button } from 'antd';
import IM from '../components/NewIM';
import dayjs from 'dayjs';
import uniqueId from 'lodash/uniqueId';
import styles from './NewIMPage.less';

import allGroup1ChatsData from '../components/NewIM/mockData/allGroup1ChatsData';
import allPrivateChatsData from '../components/NewIM/mockData/allPrivateChatsData';
import allGroup1Chats from '../components/NewIM/mockData/allGroup1Chats';
import allOtherUser from '../components/NewIM/mockData/allOtherUsers';
import initUserData from '../components/NewIM/mockData/user';

const dataMap = { private: allPrivateChatsData, group1: allGroup1ChatsData }; // 将group类型与对应的数据集映射
const infoMap = { private: allOtherUser, group1: allGroup1Chats }; // 将group类型与对应的数据集映射

const getChatLengthAndLastData = (group, key) => {
  const queryKey = group === 'private' ? // 两个人之间的chat key为两个人各自的key如下拼接:key1-key2 按ascii字符排序
    `${initUserData.key < key ? initUserData.key: key}-${initUserData.key > key ? initUserData.key: key}` : 
      key; // 群组的chat key就是群组的key
  return [dataMap[group][queryKey].length, dataMap[group][queryKey][dataMap[group][queryKey].length - 1]]; // 返回服务器上的查询数据长度与最后的数据。
}

const IMPage = props => {
  const isInit = useRef(false);
  const [userData, setUserData] = useState(null); // 需要保存在服务器的个人数据.userData.rencentChat为左栏的最近聊天窗口
  const [groupsData, setGroupsData] = useState(null); // 拼接生成.构建发起聊天界面分栏和具体信息
  const [curChatData, setCurChatData] = useState(null);
  const updatedChatData = useRef(null); // 通知IM数据有更新的函数

  useEffect(() => {
    if (!isInit.current) {
      const { recentChats } = initUserData;
      recentChats.forEach(chat => {
        const { group, key, preDataLength } = chat;
        const [dataLength, lastData] = getChatLengthAndLastData(group, key); // 初始化窗口获取每个chat的最新数据
        chat.unReadCount = !preDataLength ? 0 : dataLength - preDataLength; // 与上次退出时保存的做对比， 更新unReadCount
        chat.lastData = lastData; // 更新最后发言记录
      });
      /* 
        此处加入不在线时推送的数据
      */

      // 发起聊天界面需要获取user有的group内的所有chat的头像、描述等信息. ownGroups[index][0]为group类型, ownGroups[index][1]为group值
      // 类型为private保存的即为private列表里所有好友的头像，简介等信息；不为private保存的即为所有加入的群组的头像，简介等信息。
      const ownGroupsData = Object.entries(initUserData.chatGroups).map(([key, value]) => [key, value.map(userOrGroup => infoMap[key][userOrGroup])]);
      setUserData(initUserData);
      setGroupsData(ownGroupsData);
      isInit.current = true;
    }
  });

  return (
    <div className={styles.iMpageWrapper} >
      <IM
        className={styles.imWrapper}
        userData={userData}
        groupsData={groupsData}
        curChatData={curChatData}
        updatedChatData={updatedChatData}
        onOpenChat={target => console.log(target)} // group && key
        onChange={(type, target, value) => console.log(type, target, value)}
      />
      {/* <Button onClick={handleAddData}>AddDataTob</Button> */}
    </div>
  );
}

export default IMPage;