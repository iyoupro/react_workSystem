import React, { memo } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import uniqueId from 'lodash/uniqueId';
import Item from './Item';
import styles from './Section.less';

const grid = 8;

const getItemStyle = (isDragging, draggableStyle) => ({
  // some basic styles to make the items look a bit nicer
  userSelect: 'none',
  padding: grid * 2,
  margin: `0 0 ${grid}px 0`,

  // change background colour if dragging
  background: isDragging ? 'lightgreen' : 'grey',

  // styles we need to apply on draggables
  ...draggableStyle,
});

const getListStyle = isDraggingOver => ({
  background: isDraggingOver ? 'lightblue' : 'lightgrey',
  padding: grid,
  width: 250,
});

const Section = ({ sectionIndex, setItemData, data, setData, selectedItem, reorderItems, ...props }) => {
  const { items } = data;
  const onDragEnd = (result) => {
    if (!result.destination || result.destination.index === 0) return;
    reorderItems(sectionIndex, result.source.index, result.destination.index);
  }
  return (
    <DragDropContext onDragEnd={onDragEnd}>
      <Droppable droppableId="droppable">
        {(provided, snapshot) => (
          <ol
            ref={provided.innerRef}
            className={styles.wrapper}
            // style={getListStyle(snapshot.isDraggingOver)}
          >
            {items && items.map((item, itemIndex) => 
              <Draggable key={item.id} draggableId={item.id} index={itemIndex} isDragDisabled={itemIndex === 0}>
                {(provided, snapshot) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    // style={getItemStyle(
                    //   snapshot.isDragging,
                    //   provided.draggableProps.style
                    // )}
                  >
                    <Item
                      data={item}
                      setData={(prop, newPropData) => setItemData(sectionIndex, itemIndex, prop, newPropData)}
                      isSelected={selectedItem.id === item.id}
                      {...props}
                    />
                  </div>
                )}
              </Draggable>
            )}
            {provided.placeholder}
          </ol>
        )}
      </Droppable>
    </DragDropContext>
  );
};

const shouldNotUpdate = (preProps, nextProps) => {
  return preProps.data === nextProps.data && preProps.mode === nextProps.mode && preProps.selectedItem === nextProps.selectedItem;
}

export default memo(Section, shouldNotUpdate);