// 表单从大到小包含关系为Page(date) <-- section <-- item。
declare type mode = 'edit' | 'write' | 'evaluate' | 'result'// 每种模式的输入data是上种模式的输出data。

declare type item = { // 传给FormsPage的data属性。
  id: string, // 随机生成的Item唯一标识，渲染无关。
  type: 'sectionTitle' /*小节标题*/ | 'radio' /*单选*/ | 'checkbox' | /*多选*/
    | "paragraph" /*段落*/ |"declaraction" /*说明*/ | 'date' /* 日期 */
  title: string, // 小项的标题, 显示在第一行。
  introduce: null | string, // 小项的说明，如果为null则隐藏，为String则显示在第二行。
  isRequired?: false // 选择是否是必填项，默认否, 如果是则在title后显示星号。只有edit模式可以编辑。 当type='sectionTitle'时恒为false。
  inputValue?: string | Array<string>, // type不为'sectionTitle'和'declaraction'时存在这个字段。只有write模式可以编辑。对于段落来讲-是输入的字，对于选择来讲-是选择的value或者values数组, 对日期来讲-是输入的一个日期或者日期区间。
  options?: ["选项1", "选项2", "选项3"], // type为'radio'和'checkbox'时才有这个字段, 表示每个选项的名字。只有edit模式可以编辑。
  layout?: number, // // type为'radio'和'checkbox'时才有这个字段。表示一行能占几个option。只有edit模式可以编辑。
  score?: 0, // type不为sectionTitle时存在这个字段，mode=evaluate时可对write模式下返回的data的每一项item进行评分。
}

declare type section = { // 传给FormsPage的data属性。
  id: string, // 随机生成的section唯一标识，渲染无关。
  title: string, // 小节的标题。
  totalScore: number, // 自动计算所有的item的score之和，只读。
  items: Array<item> // 必然存在item[0] type='sectionTitle'。
}; 

declare type data = { // 传给FormsPage的data属性
  title: string, // 表单的标题
  sections: Array<section>
}; 