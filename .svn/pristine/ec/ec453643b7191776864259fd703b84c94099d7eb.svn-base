import React, { memo, useState, useRef } from 'react';
import { Icon, Checkbox, Modal, Avatar } from 'antd';
import { DragDropWrapper, SortableList } from '../components/SortableList';
import classNames from 'classnames';
import dayjs from 'dayjs';
import styles from './DraggableTaskPage.less';

let itemIndex = 1;

const getLabels = (count) => {
  return Array.from({ length: count }, (v, k) => k).map(k => {
    if (Math.random() < 0.2) return '重要';
    else if (Math.random() < 0.4) return 'logo问题';
    else if (Math.random() < 0.6) return '不重要';
    else if (Math.random() < 0.8) return '还好';
    else return '立即';
  });

}

const getItems = (count, listId) =>
  Array.from({ length: count }, (v, k) => k).map(k => ({
    key: `${listId}-item-${itemIndex}`,
    title: `item ${itemIndex++}`,
    avatar: itemIndex,
    labels: getLabels(Math.random() * 12),
    date: new Date(),
    message: parseInt(Math.random() * 1000),
    link: parseInt(Math.random()* 3 + 1),
  }));

const initListData = { 
  value: {
    list1: getItems(2, '合同阶段'),
    list2: getItems(4, '需求阶段'),
    list3: getItems(6, '检验阶段'),
    list4: getItems(3, '验收阶段'),
  },
}

const Item = memo(props => {
  const { connectDragRef, connectDrag, connectDragHandle, connectDragStyle, connectSelect, 
    data, index, listId, isDragging, isSelected, isDraggedItem, draggedItemsCount, ...otherProps } = props;
  const { title, avatar, labels, date, message, link } = data;
  const [checked, setChecked] = useState(false);
  return (
    <div
      className={classNames(styles.item, {
        [styles.dragging]: isDragging,
        [styles.selected]: isSelected,
        [styles.draggedItem]: isDraggedItem,
        [styles.checked]: checked
      }, `checked-${index}`)}
      ref={connectDragRef}
      {...connectDrag}
      {...connectDragHandle}
      onClick={event => connectSelect && typeof event.target.className === 'string' && event.target.className.indexOf('ant-checkbox-input ') === -1 && connectSelect(event)}
    > 
      <div><Checkbox defaultChecked={false} onChange={event => setChecked(event.target.checked)} /></div>
      <div>
        <p>{title}</p>
        <div className={styles.labels}>{labels.map((label, index) => <p key={index}>{label}</p>)}</div>
        <div className={styles.footPanel}>
          <Icon type="clock-circle" />
          <span>{dayjs(date).format('MM-DD')}</span>
          <Icon type="bars" />
          <Icon type="message" />
          <span>{message}</span>
          <Icon type="link" />
          <span>{link}</span>
        </div>
      </div>
      <div><Avatar size="large" >{avatar}</Avatar></div>
      {isDragging && isDraggedItem && draggedItemsCount > 1 && <div className={styles.count}>{draggedItemsCount}</div>}
    </div>
  );
})

const List = memo(props => {
  const { listId, data, onChange, isDragging, title } = props;
  const list = useRef(null);

  const handleDeleteChecked = () => {
    const checkedItemIndex = [];
    list.current.querySelectorAll(`.${styles.checked}`).forEach(item => checkedItemIndex.push(parseInt(item.className.substr(item.className.lastIndexOf('-') + 1))));
    if (checkedItemIndex.length === 0) return;
    Modal.confirm({
      title: '是否确认删除选中项目?',
      content: '删除后数据无法回复',
      okText: '确认',
      okType: 'danger',
      cancelText: '取消',
      onOk() {
        data.value[listId] = data.value[listId].filter((_, index) => checkedItemIndex.indexOf(index) === -1);
        onChange(data);
      },
    });
  }

  const handleAddNewItem = () => {

  }

  return (
    <div ref={list} className={styles.listWrapper}>
      <div className={styles.head}>
        <span className={styles.title}>{title}</span>
        <div className={styles.iconGroup}>
          <Icon type="delete" onClick={handleDeleteChecked} />
          <Icon type="setting" />
        </div>
      </div>
      <SortableList
        className={`${styles.list} ${isDragging ? styles.dragging : ''}`}
        listId={listId}
        data={data}
        onChange={onChange}
        ItemRender={Item}
        direction='vertical'
        // multiDrag
      />
      <div className={styles.foot}>
        <Icon type="plus-circle" />
        <span className={styles.title}>新建任务</span>
      </div>
    </div>
  )
});

const DraggableTaskPage = props => {
  const [listData, setListData] = useState(initListData);
  const onListDataChange = newData => setListData(newData);
  const { isDragging, draggedItemIndex, selectedList, selectedItems } = listData;

  return (
    <div className={styles.wrapper}> 
      <DragDropWrapper data={listData} onChange={onListDataChange} >
        <List
          title='合同阶段'
          listId='list1'
          data={listData}
          onChange={onListDataChange}
          isDragging={isDragging && selectedList === 'list1'}
        />
        <List
          title='需求阶段'
          listId='list2'
          data={listData}
          onChange={onListDataChange}
          isDragging={isDragging && selectedList === 'list2'}
        />
        <List
          title='检验阶段'
          listId='list3'
          data={listData}
          onChange={onListDataChange}
          isDragging={isDragging && selectedList === 'list3'}
        />
        <List
          title='验收'
          listId='list4'
          data={listData}
          onChange={onListDataChange}
          isDragging={isDragging && selectedList === 'list4'}
        />
      </DragDropWrapper>
    </div>
  );
}

export default DraggableTaskPage;