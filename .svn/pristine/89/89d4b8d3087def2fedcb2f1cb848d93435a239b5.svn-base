import React, { Component } from 'react';
import { DragLayer } from 'react-dnd';
import PropTypes from 'prop-types';

class DragPreview extends Component {
  static propTypes = {
    currentOffset: PropTypes.shape({
      x: PropTypes.number.isRequired,
      y: PropTypes.number.isRequired,
    }),
    initialPos: PropTypes.shape({
      x: PropTypes.number.isRequired,
      y: PropTypes.number.isRequired,
    }),
    isDragging: PropTypes.bool.isRequired,
  };

  render() {
    const { isDragging, dragPreview, currentOffset, initialPos, onMobile } = this.props;
    if (!isDragging) {
      return null;
    } 
    let left, top ,transform;
    if (currentOffset && initialPos) {
      left = initialPos.x;
      top = initialPos.y;
      transform = `translate(calc(${currentOffset.x}px - 50%), calc(${currentOffset.y}px - 50%)`;
    }

    return (
      <div style={{ 
        pointerEvents: 'none', position: 'fixed', zIndex: 100, background: 'transparent',
        display: currentOffset ? '' : 'none', transform, left, top
      }}>
        {dragPreview && <dragPreViewElement />}
        {!dragPreview && onMobile && <div style={{ height: '36px', width: '36px', background: 'transparent', borderRadius: '50%', border: '2px solid #000' }} />}
      </div>
    );
  }
}

export default DragLayer(monitor => ({
  initialPos: monitor.getInitialClientOffset(),
  currentOffset: monitor.getDifferenceFromInitialOffset(),
  isDragging: monitor.isDragging(),
}))(DragPreview);
