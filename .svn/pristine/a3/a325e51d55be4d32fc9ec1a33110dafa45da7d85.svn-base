/** @format */

import React, { memo, useRef, useEffect } from 'react';
import PropTypes from 'prop-types';

import nodeShaples from './nodeShaples';
import styles from './index.less';

const handleClick = chartView => {
  console.log(chartView);
};

const FlowChart = memo(props => {
  const { className, style, uniderection, nodeShaples, extraNodeShaples, showShadow } = props;
  const chartWrapper = useRef(null);
  const chartView = useRef(null);
  let selectedNode = null;

  return (
    <div
      ref={chartWrapper}
      className={`${className} ${styles.chartWrapper}`}
      style={{ ...style, overflow: uniderection ? 'auto' : '' }}
      onClick={() => handleClick(chartView)}
    >
      <svg ref={chartView} className={styles.chartView}>
        <defs>
          {
            <filter id="nodeShadow" x="-50%" y="-50%" width="200%" height="200%">
              <feOffset result="offOut" in="SourceGraphic" dx="2" dy="2" />
              {/* <feFlood flood-color="rgba(0,0,0,0.5)"/> */}
              <feColorMatrix
                result="matrixOut"
                in="offOut"
                type="matrix"
                values="0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0"
              />
              <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="4" />
              <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
            </filter>
          }
          {nodeShaples.map(shaple => shaple)}
          {extraNodeShaples && extraNodeShaples.map(shaple => shaple)}
        </defs>
        <g className="group">
          <g className="lineGroup" />
          <g className="nodeGroup" />
        </g>
      </svg>
    </div>
  );
});

FlowChart.defaultProps = {
  nodeShaples,
};

FlowChart.propTypes = {
  uniderection: PropTypes.bool.isRequired,
  extraNodeShaples: PropTypes.array,
};

export default FlowChart;
