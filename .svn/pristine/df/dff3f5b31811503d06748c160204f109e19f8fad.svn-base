/** @format */

import { useEffect } from 'react';
import cloneDeep from 'lodash/cloneDeep';
import * as d3 from 'd3';
import { getHeadNode, getTailNode, getPreviousNodes, getNextNodes } from './utils/';

const calcNodePos = (props, chartInfo) => {
  const { chartData, uniderection } = props;
  const { chartWidth, nodeWidth, chartView } = chartInfo;
  const rowDistance = (1 + props.rowDistance) * nodeWidth;
  const colDistance = (1 + props.colDistance) * nodeWidth;
  const headNode = getHeadNode(chartData);
  const tailNode = getTailNode(chartData);
  /* 节点的位置为其父节点的位置parentNode.posX + rowDistance * 父节点的偏移量parentNode.offset * 该节点的偏移位置offsetPos。*/
  (function reverseTraversalNodes (node, offset) {
    // 倒序遍历节点求得每个节点的偏移量offset和偏移位置offsetPos
    node.posY = 0;
    let nextNodeOffset;
    if (node.next.length > 1) {
      if (node.offset && node.offset < offset) node.offset = offset;
      if (!node.offset) node.offset = offset === 0 ? 1 : offset;
      nextNodeOffset = node.offset * node.next.length;
    } else {
      node.offset = 0;
      nextNodeOffset = offset;
    }
    if (node.previous.length > 1) nextNodeOffset = 0;
    /* 倒序遍历节点，给出当前节点相对于父节的偏移位置offsetPos。
    如父节点有四个子节点0, 1, 2, 3 子节点的偏移位置offsetPos分别应该为 -2, -1, 1, 2。*/
    if (node.previous.length >= 1) {
      const parentNodes = getPreviousNodes(chartData, node);
      const indexInParentNode = parentNodes[0].next.indexOf(node.no);
      const childNumber = parentNodes[0].next.length;
      node.offsetPos = indexInParentNode - parseInt(childNumber / 2);
      if (childNumber % 2 === 0 && indexInParentNode >= parseInt(childNumber / 2))
        node.offsetPos += 1;
      if (node.brother.length % 2 === 1) node.offsetPos += node.offsetPos > 0 ? -0.5 : 0.5;
      for (let i = 0, length = parentNodes.length; i < length; i += 1)
        reverseTraversalNodes(parentNodes[i], nextNodeOffset);
    } else {
      // 若为首节点结束遍历
      node.offsetPos = 0;
    }
  }(tailNode, 0));
  (function traversalNodes(node, posY) {
    if (!node.posY || node.posY < posY) node.posY = posY;
    if (node === headNode || node === tailNode) {
      node.posX = (chartWidth - nodeWidth) / 2;
    }
    else {
      let parentNodesX = 0;
      const parentNodes = getPreviousNodes(chartData, node);
      for (let i = 0, length = parentNodes.length; i < length; i += 1) {
        parentNodesX += parentNodes[i].posX;
      }
      parentNodesX /= parentNodes.length;
      node.posX = parentNodesX;
      if (parentNodes.length === 1) {
        node.posX += parentNodes[0].offset * node.offsetPos * rowDistance;
      }
    }
    if (node.next.length >= 1) {
      const childNodes = getNextNodes(chartData, node);
      for (let i = 0, length = childNodes.length; i < length; i++)
        traversalNodes(childNodes[i], posY + colDistance);
    }
  }(headNode, 10));
  if (uniderection) chartView.style.height = tailNode.posY + nodeWidth;
};

const renderNode = (props, chartInfo) => {
  const { chartData, uniderection, chartView } = props;
  const { chartWidth, nodeWidth } = chartInfo;
  const nodeGroup = d3.select(chartView).select('.nodeGroup');
  const lineGroup = d3.select(chartView).select('.lineGroup');
  const lines = lineGroup.selectAll('path').data(chartData, d => d.id);
  const nodes = nodeGroup.selectAll('g').data(chartData, d => d.id);
}

const render = (props, chartInfo) => {
  useEffect(() => {
    const usedProps = props;
    const { nodeSize } = cloneDeep(usedProps);
    chartInfo.chartWrapper = chartInfo.chartWrapper.current;
    chartInfo.chartView = chartInfo.chartView.current;
    chartInfo.chartWidth = chartInfo.chartWrapper.clientWidth;
    chartInfo.nodeWidth = (chartInfo.chartWidth * nodeSize) / 100;
    calcNodePos(usedProps, chartInfo);
    renderNode(usedProps, chartInfo);
  });
};

export default { render };
